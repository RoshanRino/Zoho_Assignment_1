// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kart.proto

#include "kart.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace KartData {
PROTOBUF_CONSTEXPR Product::Product(
    ::_pbi::ConstantInitialized)
  : catagory_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , brand_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , price_(0)
  , stock_(0){}
struct ProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductDefaultTypeInternal() {}
  union {
    Product _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductDefaultTypeInternal _Product_default_instance_;
PROTOBUF_CONSTEXPR Products::Products(
    ::_pbi::ConstantInitialized)
  : product_(){}
struct ProductsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductsDefaultTypeInternal() {}
  union {
    Products _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductsDefaultTypeInternal _Products_default_instance_;
}  // namespace KartData
static ::_pb::Metadata file_level_metadata_kart_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_kart_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kart_2eproto = nullptr;

const uint32_t TableStruct_kart_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KartData::Product, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KartData::Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KartData::Product, catagory_),
  PROTOBUF_FIELD_OFFSET(::KartData::Product, brand_),
  PROTOBUF_FIELD_OFFSET(::KartData::Product, model_),
  PROTOBUF_FIELD_OFFSET(::KartData::Product, price_),
  PROTOBUF_FIELD_OFFSET(::KartData::Product, stock_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KartData::Products, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KartData::Products, product_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::KartData::Product)},
  { 16, -1, -1, sizeof(::KartData::Products)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::KartData::_Product_default_instance_._instance,
  &::KartData::_Products_default_instance_._instance,
};

const char descriptor_table_protodef_kart_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nkart.proto\022\010KartData\"\245\001\n\007Product\022\025\n\010ca"
  "tagory\030\001 \001(\tH\000\210\001\001\022\022\n\005brand\030\002 \001(\tH\001\210\001\001\022\022\n"
  "\005model\030\003 \001(\tH\002\210\001\001\022\022\n\005price\030\004 \001(\005H\003\210\001\001\022\022\n"
  "\005stock\030\005 \001(\005H\004\210\001\001B\013\n\t_catagoryB\010\n\006_brand"
  "B\010\n\006_modelB\010\n\006_priceB\010\n\006_stock\".\n\010Produc"
  "ts\022\"\n\007product\030\001 \003(\0132\021.KartData.Productb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_kart_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kart_2eproto = {
    false, false, 246, descriptor_table_protodef_kart_2eproto,
    "kart.proto",
    &descriptor_table_kart_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_kart_2eproto::offsets,
    file_level_metadata_kart_2eproto, file_level_enum_descriptors_kart_2eproto,
    file_level_service_descriptors_kart_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kart_2eproto_getter() {
  return &descriptor_table_kart_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kart_2eproto(&descriptor_table_kart_2eproto);
namespace KartData {

// ===================================================================

class Product::_Internal {
 public:
  using HasBits = decltype(std::declval<Product>()._has_bits_);
  static void set_has_catagory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Product::Product(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:KartData.Product)
}
Product::Product(const Product& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  catagory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    catagory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_catagory()) {
    catagory_.Set(from._internal_catagory(), 
      GetArenaForAllocation());
  }
  brand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    brand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_brand()) {
    brand_.Set(from._internal_brand(), 
      GetArenaForAllocation());
  }
  model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    model_.Set(from._internal_model(), 
      GetArenaForAllocation());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&stock_) -
    reinterpret_cast<char*>(&price_)) + sizeof(stock_));
  // @@protoc_insertion_point(copy_constructor:KartData.Product)
}

inline void Product::SharedCtor() {
catagory_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  catagory_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
brand_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  brand_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stock_) -
    reinterpret_cast<char*>(&price_)) + sizeof(stock_));
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:KartData.Product)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Product::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  catagory_.Destroy();
  brand_.Destroy();
  model_.Destroy();
}

void Product::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:KartData.Product)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      catagory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      brand_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      model_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stock_) -
        reinterpret_cast<char*>(&price_)) + sizeof(stock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Product::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string catagory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_catagory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KartData.Product.catagory"));
        } else
          goto handle_unusual;
        continue;
      // optional string brand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_brand();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KartData.Product.brand"));
        } else
          goto handle_unusual;
        continue;
      // optional string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KartData.Product.model"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_stock(&has_bits);
          stock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Product::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KartData.Product)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string catagory = 1;
  if (_internal_has_catagory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_catagory().data(), static_cast<int>(this->_internal_catagory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KartData.Product.catagory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_catagory(), target);
  }

  // optional string brand = 2;
  if (_internal_has_brand()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KartData.Product.brand");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brand(), target);
  }

  // optional string model = 3;
  if (_internal_has_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KartData.Product.model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model(), target);
  }

  // optional int32 price = 4;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // optional int32 stock = 5;
  if (_internal_has_stock()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_stock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KartData.Product)
  return target;
}

size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KartData.Product)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string catagory = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_catagory());
    }

    // optional string brand = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brand());
    }

    // optional string model = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional int32 price = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
    }

    // optional int32 stock = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stock());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Product::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Product::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Product::GetClassData() const { return &_class_data_; }

void Product::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Product *>(to)->MergeFrom(
      static_cast<const Product &>(from));
}


void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KartData.Product)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_catagory(from._internal_catagory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_brand(from._internal_brand());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      stock_ = from.stock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KartData.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::InternalSwap(Product* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &catagory_, lhs_arena,
      &other->catagory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &brand_, lhs_arena,
      &other->brand_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Product, stock_)
      + sizeof(Product::stock_)
      - PROTOBUF_FIELD_OFFSET(Product, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Product::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kart_2eproto_getter, &descriptor_table_kart_2eproto_once,
      file_level_metadata_kart_2eproto[0]);
}

// ===================================================================

class Products::_Internal {
 public:
};

Products::Products(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  product_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:KartData.Products)
}
Products::Products(const Products& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      product_(from.product_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KartData.Products)
}

inline void Products::SharedCtor() {
}

Products::~Products() {
  // @@protoc_insertion_point(destructor:KartData.Products)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Products::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Products::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Products::Clear() {
// @@protoc_insertion_point(message_clear_start:KartData.Products)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Products::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KartData.Product product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_product(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Products::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KartData.Products)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KartData.Product product = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_product_size()); i < n; i++) {
    const auto& repfield = this->_internal_product(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KartData.Products)
  return target;
}

size_t Products::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KartData.Products)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KartData.Product product = 1;
  total_size += 1UL * this->_internal_product_size();
  for (const auto& msg : this->product_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Products::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Products::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Products::GetClassData() const { return &_class_data_; }

void Products::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Products *>(to)->MergeFrom(
      static_cast<const Products &>(from));
}


void Products::MergeFrom(const Products& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KartData.Products)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  product_.MergeFrom(from.product_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Products::CopyFrom(const Products& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KartData.Products)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Products::IsInitialized() const {
  return true;
}

void Products::InternalSwap(Products* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  product_.InternalSwap(&other->product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Products::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kart_2eproto_getter, &descriptor_table_kart_2eproto_once,
      file_level_metadata_kart_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KartData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KartData::Product*
Arena::CreateMaybeMessage< ::KartData::Product >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KartData::Product >(arena);
}
template<> PROTOBUF_NOINLINE ::KartData::Products*
Arena::CreateMaybeMessage< ::KartData::Products >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KartData::Products >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
